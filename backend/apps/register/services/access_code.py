# apps.register.services.access_code.py
import secrets
from datetime import datetime, timedelta
from apps.register.models import AccessCode

def generate_access_code(professional):
    code = str(secrets.randbelow(10000)).zfill(4)
    expires = datetime.now() + timedelta(minutes=10)
    return AccessCode.objects.create(professional=professional, code=code, expires_at=expires)

"""
ğŸ“˜ MÃ³dulo: access_code.py â€” services
ResponsÃ¡vel pela geraÃ§Ã£o segura de cÃ³digos temporÃ¡rios para autenticaÃ§Ã£o via OTP.

ğŸ“¦ FunÃ§Ã£o incluÃ­da
generate_access_code(professional)
- Gera um cÃ³digo numÃ©rico de 4 dÃ­gitos usando o mÃ³dulo secrets (mais seguro que random)
- Define a expiraÃ§Ã£o do cÃ³digo (expires_at) â€” padrÃ£o: 10 minutos
- Salva e retorna uma instÃ¢ncia do modelo AccessCode

ğŸ”— Utiliza
- AccessCode (modelo)
- secrets.randbelow() para aleatoriedade segura
- datetime + timedelta para calcular tempo de validade

ğŸ“˜ MÃ³dulo: notifications.py â€” services
ResponsÃ¡vel pelo envio (simulado) de notificaÃ§Ãµes de cÃ³digo via email e WhatsApp.

ğŸ“¦ FunÃ§Ãµes incluÃ­das
send_code_email(professional, code)
- Simula envio de email com o cÃ³digo gerado
send_code_whatsapp(professional, code)
- Simula envio de mensagem WhatsApp com o cÃ³digo

"""